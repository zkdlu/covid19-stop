const sample1 = "9.29(화) ※증상발현:기침</p><p>" + "\n" +
"- 13:00~14:00 자택→관외 (지하철 7호선 중계역 승차, 이수역 하차, 마스크 착용)</p><p>" + "\n" +
"- 14:00~16:10 관외</p><p>" + "\n" +
"- 16:10~17:00 관외→자택 (지하철 7호선 이수역 승차, 중계역 하차, 마스크 착용)</p><p>" + "\n" +
"- 17:00~ 자택 머무름</p><p>" + "\n" +
"9.30(수)~10.4(일) 자택 머무름</p><p>" + "\n" +
"10.5(월) </p><p>" + "\n" +
"- 08:00~09:00 자택→노원구보건소 (도보, 가족1명 동행, 전원 마스크 착용)</p><p>" + "\n" +
"- 09:00~09:20 노원구보건소</p><p>" + "\n" +
"- 09:20~10:00 노원구보건소→자택 (도보, 가족1명 동행, 전원 마스크 착용)</p><p>" + "\n" +
"- 10:00~ 자택 머무름</p><p>" + "\n" +
"10.6(화)</p><p>" + "\n" +
"- 10:20~11:10 자택→관외 (지하철 7호선 중계역 승차, 건대역 환승, 2호선 강변역 하차, 마스크 착용)</p><p>" + "\n" +
"- 11:10~12:10 관외</p><p>" + "\n" +
"- 12:10~13:00 관외→자택 (지하철 2호선 강변역 승차, 건대역 환승, 7호선 중계역 하차, 마스크 착용)</p><p>" + "\n" +
"- 13:00~15:40 자택 머무름</p><p>" + "\n" +
"- 15:40~16:00 자택→노원구보건소 (도보, 마스크 착용)</p><p>" + "\n" +
"- 16:00~16:10 검체 채취</p><p>" + "\n" +
"- 16:10~16:30 노원구보건소→자택 (도보, 마스크 착용)</p><p>" + "\n" +
"- 16:30~ 자택 머무름</p><p>" + "\n" +
"10.7(수) 양성판정, 적십자병원 입원</p>";

const sample2 = "</p><p>" + "\n" +
"○ 10.3.(토)</p><p>" + "\n" +
"- 00:00-07:00 | 자택 | 접촉자 1명 (동거가족)</p><p>" + "\n" +
"- 07:00-09:30 | 자택→중랑천 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 09:30-10:00 | 중랑천→자택 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"</p><p>" + "\n" +
"○ 10.4.(일)</p><p>" + "\n" +
"- 07:00-09:30 | 자택→중랑천 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 09:30-10:00 | 중랑천→자택 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"</p><p>" + "\n" +
"○ 10.5.(월)</p><p>" + "\n" +
"- 07:00-09:30 | 자택→중랑천 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 09:30-10:00 | 중랑천→자택 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 10:00-14:25 | 자택</p><p>" + "\n" +
"- 14:25-14:34 | 자택→의원 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 14:34-15:25 | 의원(방학동) | 마스크 착용, 접촉자 없음</p><p>" + "\n" +
"- 15:25-15:29 | 의원→약국 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 15:29-15:38 | 약국(방학동) | 마스크 착용, 접촉자 없음</p><p>" + "\n" +
"- 15:38-15:45 | 약국→자택 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"</p><p>" + "\n" +
"○ 10.6.(화)</p><p>" + "\n" +
"- 15:15-15:30 | 자택→도봉구보건소 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 15:30-16:00 | 도봉구보건소 | 선별진료소 검체 채취</p><p>" + "\n" +
"- 16:00-16:15 | 도봉구보건소→자택 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"</p><p>" + "\n" +
"○ 10.7.(수)</p><p>" + "\n" +
"- 확진 판정 후 서울의료원 이송</p><p>" + "\n" +
"</p><p>" + "\n" +
"□ 조치사항</p><p>" + "\n" +
"- 역학조사 결과 : 접촉자 1명(가족 1명), 검사진행 중 1명</p>";

const sample3 = "</p><p>" + "\n" +
"○ 10.3.(토)</p><p>" + "\n" +
"- 00:00-07:00 | 자택 | 접촉자 1명 (동거가족)</p><p>" + "\n" +
"- 07:00-09:30 | 자택→중랑천 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 09:30-10:00 | 중랑천→자택 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"</p><p>" + "\n" +
"○ 10.4.(일)</p><p>" + "\n" +
"- 07:00-09:30 | 자택→중랑천 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 09:30-10:00 | 중랑천→자택 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"</p><p>" + "\n" +
"○ 10.5.(월)</p><p>" + "\n" +
"- 07:00-09:30 | 자택→중랑천 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 09:30-10:00 | 중랑천→자택 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 10:00-14:25 | 자택</p><p>" + "\n" +
"- 14:25-14:34 | 자택→의원 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 14:34-15:25 | 의원(방학동) | 마스크 착용, 접촉자 없음</p><p>" + "\n" +
"- 15:25-15:29 | 의원→약국 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 15:29-15:38 | 약국(방학동) | 마스크 착용, 접촉자 없음</p><p>" + "\n" +
"- 15:38-15:45 | 약국→자택 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"</p><p>" + "\n" +
"○ 10.6.(화)</p><p>" + "\n" +
"- 15:15-15:30 | 자택→도봉구보건소 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"- 15:30-16:00 | 도봉구보건소 | 선별진료소 검체 채취</p><p>" + "\n" +
"- 16:00-16:15 | 도봉구보건소→자택 | 도보 이용, 마스크 착용</p><p>" + "\n" +
"</p><p>" + "\n" +
"○ 10.7.(수)</p><p>" + "\n" +
"- 확진 판정 후 서울의료원 이송</p><p>" + "\n" +
"</p><p>" + "\n" +
"□ 조치사항</p><p>" + "\n" +
"- 역학조사 결과 : 접촉자 1명(가족 1명), 검사진행중 1명</p>";

const removeTag = (str) => {
    return str.replace(/<p>/gi, '')
                .replace(/<\/p>/gi, '')
                .replace(/○/gi, '');
}

const splitDate = (str) => {
    let array = Array();
    
    let inner = Array();

    const regex = /\((.?)\)/;
    let elems = str.split('\n');

    let prevElem = elems[0];

    for (const elem of elems) {
        let result = elem.match(regex);
        if (result) {
            if (inner.length !== 0) {
                array.push({
                    "date": prevElem,
                    "move": inner
                });

                inner = Array();
            }

            prevElem = elem;
        } else {
            if (elem) {
                inner.push(elem);
            }
        }
    }

    return array;
}

const connectMove = (moveData) => {
    let array = Array();
    const length = moveData.length;

    for (let i = 0; i < length; i++) {
        const data = moveData[i];
        const move = data.move;

        let path = Array();
        let pathIndex = 0;
        let detail = false;

        const moveLength = move.length;
        for (let j = 0; j < moveLength; j++) {
            let step = move[j];
            let byStep = step.split('|');

            let time = byStep[0];
            let moving = byStep[1];

            console.log(step);
            let movingDirection = moving.split('→');
            if (movingDirection.length === 2) {
                let to = movingDirection[1];
                let from = movingDirection[0];

                if (detail !== true) {
                    path[pathIndex] = from;
                }
                path[pathIndex + 1] = to;

                pathIndex++;
                detail = false;
            } else {
                path[pathIndex] = moving;
                detail = true;
            }
        }

        array.push({
            'date': data.date,
            'path': path
        });
    }

    return array;
}

let str = removeTag(sample2);
let moveData = splitDate(str);
let result = connectMove(moveData);

console.log(result);